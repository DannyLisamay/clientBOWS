{"ast":null,"code":"var _jsxFileName = \"/workspace/BOWS/client/src/pages/index.js\",\n    _s = $RefreshSig$();\n\n//SEE TESTZIPCODE.JS FOR TRIAL RUN AND THOUGHT PROCESS\nimport React, { useEffect, useState } from 'react'; //BOWS API\n\nimport { getResortsData } from '../components/Resort/data/bowsAPI'; //import Snowboarder from '../images/snowboarder.jpg'\n\nimport { Link, useNavigate } from \"react-router-dom\"; //variable used for user input\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar userZipCode; //pre definded zipcode for testing\n\nconst moutainZip = \"03242\"; // UNQIUE API KEY DONT SHOW\n\nconst apikey = 'nC8qTyVabyAPlnldpR89nTs4OmvWmdyJmGeaHoklFH71ul1StpMre3CNxOhpCOyy'; //API used by getting apikey then having the userzipcode, and then having it compare to the second zipcode which is the mountainzipcode\n\nvar apiDistance = `https://www.zipcodeapi.com/rest/${apikey}/distance.json/${userZipCode}/${moutainZip}/mile`;\n/*\r\n// this is using the API as a function to use as the textbox by grabbing the id\r\n// thus having it fetch the data and then console logging for now the data \r\nconst searchzipcode = (data) => {\r\n    userZipCode = document.getElementById('searchResortInput').value;\r\n    apiDistance = `https://www.zipcodeapi.com/rest/${apikey}/distance.json/${userZipCode}/${moutainZip}/mile`;\r\n    fetch(apiDistance)\r\n        .then(response => response.json())\r\n        .then(data => console.log(data));\r\n};\r\n*/\n\nconst Home = () => {\n  _s();\n\n  // bowsAPI used for resorts\n  const navigate = useNavigate();\n\n  const ResortListFromApi = async () => {\n    var searchResortInput = document.getElementById('searchResortInput').value;\n    const data = await getResortsData(); // Find resort from backend\n    // split used to remove empty spaces. \n    // ex if user types patspeak will find pats peak.\n\n    var search_inputresult = searchResortInput.toUpperCase();\n    var resortnotfound = false;\n    data.forEach(resort => {\n      // this is to make it so users can enter lowercase or uppercase to look at a resort\n      if (resort.name.toUpperCase().split(' ').join('') === search_inputresult.split(' ').join('')) {\n        resortnotfound = true;\n        navigate('/resort', {\n          state: {\n            resort\n          }\n        });\n      }\n    }); //if resort is not found, show an alert box to show the user it is not in the database\n\n    if (!resortnotfound) {\n      console.log(\"Resort not found\");\n      alert(\"Resort Not Found, Will make this a text box soon. \");\n    }\n  }; // function used for error when invalid input text and user clicks enter\n\n\n  const enterPressed = event => {\n    if (event.keyCode === 13) {\n      ResortListFromApi();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aboutme\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"homepage\",\n        children: \"Please enter a resort you want to search for down below!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"background\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"searchbar\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"searchResortInput\",\n          className: \"searchbar\",\n          placeholder: \"Please enter your zipcode or a Resort name\",\n          onKeyDown: enterPressed\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: ResortListFromApi,\n          className: \"searchbutton\",\n          children: \"SUBMIT \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Home, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/workspace/BOWS/client/src/pages/index.js"],"names":["React","useEffect","useState","getResortsData","Link","useNavigate","userZipCode","moutainZip","apikey","apiDistance","Home","navigate","ResortListFromApi","searchResortInput","document","getElementById","value","data","search_inputresult","toUpperCase","resortnotfound","forEach","resort","name","split","join","state","console","log","alert","enterPressed","event","keyCode"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CACA;;AACA,SAASC,cAAT,QAA+B,mCAA/B,C,CAEA;;AACA,SAASC,IAAT,EAAeC,WAAf,QAAkC,kBAAlC,C,CAGA;;;AACA,IAAIC,WAAJ,C,CACA;;AACA,MAAMC,UAAU,GAAG,OAAnB,C,CACA;;AACA,MAAMC,MAAM,GAAG,kEAAf,C,CACA;;AACA,IAAIC,WAAW,GAAI,mCAAkCD,MAAO,kBAAiBF,WAAY,IAAGC,UAAW,OAAvG;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMG,IAAI,GAAG,MAAM;AAAA;;AACf;AACA,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;;AAEA,QAAMO,iBAAiB,GAAG,YAAY;AAElC,QAAIC,iBAAiB,GAAGC,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,EAA6CC,KAArE;AACA,UAAMC,IAAI,GAAG,MAAMd,cAAc,EAAjC,CAHkC,CAIlC;AACA;AACA;;AACA,QAAIe,kBAAkB,GAAGL,iBAAiB,CAACM,WAAlB,EAAzB;AACA,QAAIC,cAAc,GAAG,KAArB;AAEAH,IAAAA,IAAI,CAACI,OAAL,CAAaC,MAAM,IAAI;AACnB;AACA,UAAKA,MAAM,CAACC,IAAP,CAAYJ,WAAZ,GAA0BK,KAA1B,CAAgC,GAAhC,EAAqCC,IAArC,CAA0C,EAA1C,MAAkDP,kBAAkB,CAACM,KAAnB,CAAyB,GAAzB,EAA8BC,IAA9B,CAAmC,EAAnC,CAAvD,EAAgG;AAC5FL,QAAAA,cAAc,GAAG,IAAjB;AACAT,QAAAA,QAAQ,CAAC,SAAD,EAAY;AAAEe,UAAAA,KAAK,EAAE;AAAEJ,YAAAA;AAAF;AAAT,SAAZ,CAAR;AACH;AACJ,KAND,EAVkC,CAkBlC;;AACA,QAAI,CAACF,cAAL,EAAqB;AACjBO,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAC,MAAAA,KAAK,CAAC,oDAAD,CAAL;AACH;AAEJ,GAxBD,CAJe,CA6Bf;;;AACA,QAAMC,YAAY,GAAGC,KAAK,IAAI;AAC1B,QAAIA,KAAK,CAACC,OAAN,KAAkB,EAAtB,EAA0B;AACtBpB,MAAAA,iBAAiB;AACpB;AACJ,GAJD;;AAKA,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BACI;AAAG,QAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAMI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCAEI;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,EAAE,EAAC,mBAAtB;AAA0C,UAAA,SAAS,EAAC,WAApD;AAAgE,UAAA,WAAW,EAAC,4CAA5E;AAAyH,UAAA,SAAS,EAAEkB;AAApI;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAII;AAAQ,UAAA,OAAO,EAAElB,iBAAjB;AAAoC,UAAA,SAAS,EAAC,cAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH,CApDD;;GAAMF,I;UAEeL,W;;;KAFfK,I;AAsDN,eAAeA,IAAf","sourcesContent":["//SEE TESTZIPCODE.JS FOR TRIAL RUN AND THOUGHT PROCESS\r\nimport React, { useEffect, useState } from 'react'\r\n//BOWS API\r\nimport { getResortsData } from '../components/Resort/data/bowsAPI';\r\n\r\n//import Snowboarder from '../images/snowboarder.jpg'\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\n\r\n\r\n//variable used for user input\r\nvar userZipCode;\r\n//pre definded zipcode for testing\r\nconst moutainZip = \"03242\";\r\n// UNQIUE API KEY DONT SHOW\r\nconst apikey = 'nC8qTyVabyAPlnldpR89nTs4OmvWmdyJmGeaHoklFH71ul1StpMre3CNxOhpCOyy';\r\n//API used by getting apikey then having the userzipcode, and then having it compare to the second zipcode which is the mountainzipcode\r\nvar apiDistance = `https://www.zipcodeapi.com/rest/${apikey}/distance.json/${userZipCode}/${moutainZip}/mile`;\r\n\r\n\r\n/*\r\n// this is using the API as a function to use as the textbox by grabbing the id\r\n// thus having it fetch the data and then console logging for now the data \r\nconst searchzipcode = (data) => {\r\n    userZipCode = document.getElementById('searchResortInput').value;\r\n    apiDistance = `https://www.zipcodeapi.com/rest/${apikey}/distance.json/${userZipCode}/${moutainZip}/mile`;\r\n    fetch(apiDistance)\r\n        .then(response => response.json())\r\n        .then(data => console.log(data));\r\n};\r\n*/\r\nconst Home = () => {\r\n    // bowsAPI used for resorts\r\n    const navigate = useNavigate();\r\n\r\n    const ResortListFromApi = async () => {\r\n\r\n        var searchResortInput = document.getElementById('searchResortInput').value;\r\n        const data = await getResortsData();\r\n        // Find resort from backend\r\n        // split used to remove empty spaces. \r\n        // ex if user types patspeak will find pats peak.\r\n        var search_inputresult = searchResortInput.toUpperCase();\r\n        var resortnotfound = false;\r\n\r\n        data.forEach(resort => {\r\n            // this is to make it so users can enter lowercase or uppercase to look at a resort\r\n            if ((resort.name.toUpperCase().split(' ').join('') === search_inputresult.split(' ').join(''))) {\r\n                resortnotfound = true;\r\n                navigate('/resort', { state: { resort } });\r\n            }\r\n        });\r\n\r\n        //if resort is not found, show an alert box to show the user it is not in the database\r\n        if (!resortnotfound) {\r\n            console.log(\"Resort not found\");\r\n            alert(\"Resort Not Found, Will make this a text box soon. \");\r\n        }\r\n\r\n    }\r\n    // function used for error when invalid input text and user clicks enter\r\n    const enterPressed = event => {\r\n        if (event.keyCode === 13) {\r\n            ResortListFromApi();\r\n        }\r\n    };\r\n    return (\r\n        <div>\r\n            <div className=\"aboutme\">\r\n                <p className=\"homepage\">\r\n                    Please enter a resort you want to search for down below!\r\n                </p>\r\n            </div>\r\n            <div className=\"background\">\r\n                <div className=\"searchbar\">\r\n\r\n                    <input type=\"text\" id=\"searchResortInput\" className=\"searchbar\" placeholder=\"Please enter your zipcode or a Resort name\" onKeyDown={enterPressed}></input>\r\n\r\n                    <button onClick={ResortListFromApi} className=\"searchbutton\">SUBMIT </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}