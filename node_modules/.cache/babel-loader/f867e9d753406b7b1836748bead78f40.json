{"ast":null,"code":"import _regeneratorRuntime from\"/workspace/BOWS/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/workspace/BOWS/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";//SEE TESTZIPCODE.JS FOR TRIAL RUN AND THOUGHT PROCESS\nimport React,{useEffect,useState}from'react';//BOWS API\nimport{getResortsData}from'../components/Resort/data/bowsAPI';//import Snowboarder from '../images/snowboarder.jpg'\nimport{Link,useNavigate}from\"react-router-dom\";//variable used for user input\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var userZipCode;//pre definded zipcode for testing\nvar moutainZip=\"03242\";// UNQIUE API KEY DONT SHOW\nvar apikey='nC8qTyVabyAPlnldpR89nTs4OmvWmdyJmGeaHoklFH71ul1StpMre3CNxOhpCOyy';//API used by getting apikey then having the userzipcode, and then having it compare to the second zipcode which is the mountainzipcode\nvar apiDistance=\"https://www.zipcodeapi.com/rest/\".concat(apikey,\"/distance.json/\").concat(userZipCode,\"/\").concat(moutainZip,\"/mile\");/*\r\n// this is using the API as a function to use as the textbox by grabbing the id\r\n// thus having it fetch the data and then console logging for now the data \r\nconst searchzipcode = (data) => {\r\n    userZipCode = document.getElementById('searchResortInput').value;\r\n    apiDistance = `https://www.zipcodeapi.com/rest/${apikey}/distance.json/${userZipCode}/${moutainZip}/mile`;\r\n    fetch(apiDistance)\r\n        .then(response => response.json())\r\n        .then(data => console.log(data));\r\n};\r\n*/var Home=function Home(){// bowsAPI used for resorts\nvar navigate=useNavigate();var ResortListFromApi=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var searchResortInput,data,search_inputresult,resortnotfound;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:searchResortInput=document.getElementById('searchResortInput').value;_context.next=3;return getResortsData();case 3:data=_context.sent;// Find resort from backend\n// split used to remove empty spaces. \n// ex if user types patspeak will find pats peak.\nsearch_inputresult=searchResortInput.toUpperCase();resortnotfound=false;data.forEach(function(resort){// this is to make it so users can enter lowercase or uppercase to look at a resort\nif(resort.name.toUpperCase().split(' ').join('')===search_inputresult.split(' ').join('')){resortnotfound=true;navigate('/resort',{state:{resort:resort}});}});//if resort is not found, show an alert box to show the user it is not in the database\nif(!resortnotfound){console.log(\"Resort not found\");alert(\"Resort Not Found, Will make this a text box soon. \");}case 8:case\"end\":return _context.stop();}}},_callee);}));return function ResortListFromApi(){return _ref.apply(this,arguments);};}();// function used for error when invalid input text and user clicks enter\nvar enterPressed=function enterPressed(event){if(event.keyCode===13){ResortListFromApi();}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"aboutme\",children:/*#__PURE__*/_jsx(\"p\",{className:\"homepage\",children:\"Please enter a resort you want to search for down below!\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"background\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"searchbar\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"searchResortInput\",className:\"searchbar\",placeholder:\"Please enter your zipcode or a Resort name\",onKeyDown:enterPressed}),/*#__PURE__*/_jsx(\"button\",{onClick:ResortListFromApi,className:\"searchbutton\",children:\"SUBMIT \"})]})})]});};export default Home;","map":{"version":3,"sources":["/workspace/BOWS/client/src/pages/index.js"],"names":["React","useEffect","useState","getResortsData","Link","useNavigate","userZipCode","moutainZip","apikey","apiDistance","Home","navigate","ResortListFromApi","searchResortInput","document","getElementById","value","data","search_inputresult","toUpperCase","resortnotfound","forEach","resort","name","split","join","state","console","log","alert","enterPressed","event","keyCode"],"mappings":"uRAAA;AACA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA;AACA,OAASC,cAAT,KAA+B,mCAA/B,CAEA;AACA,OAASC,IAAT,CAAeC,WAAf,KAAkC,kBAAlC,CAGA;wFACA,GAAIC,CAAAA,WAAJ,CACA;AACA,GAAMC,CAAAA,UAAU,CAAG,OAAnB,CACA;AACA,GAAMC,CAAAA,MAAM,CAAG,kEAAf,CACA;AACA,GAAIC,CAAAA,WAAW,2CAAsCD,MAAtC,2BAA8DF,WAA9D,aAA6EC,UAA7E,SAAf,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA,GAAMG,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,EAAM,CACf;AACA,GAAMC,CAAAA,QAAQ,CAAGN,WAAW,EAA5B,CAEA,GAAMO,CAAAA,iBAAiB,0FAAG,gMAElBC,iBAFkB,CAEEC,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,EAA6CC,KAF/C,uBAGHb,CAAAA,cAAc,EAHX,QAGhBc,IAHgB,eAItB;AACA;AACA;AACIC,kBAPkB,CAOGL,iBAAiB,CAACM,WAAlB,EAPH,CAQlBC,cARkB,CAQD,KARC,CAUtBH,IAAI,CAACI,OAAL,CAAa,SAAAC,MAAM,CAAI,CACnB;AACA,GAAKA,MAAM,CAACC,IAAP,CAAYJ,WAAZ,GAA0BK,KAA1B,CAAgC,GAAhC,EAAqCC,IAArC,CAA0C,EAA1C,IAAkDP,kBAAkB,CAACM,KAAnB,CAAyB,GAAzB,EAA8BC,IAA9B,CAAmC,EAAnC,CAAvD,CAAgG,CAC5FL,cAAc,CAAG,IAAjB,CACAT,QAAQ,CAAC,SAAD,CAAY,CAAEe,KAAK,CAAE,CAAEJ,MAAM,CAANA,MAAF,CAAT,CAAZ,CAAR,CACH,CACJ,CAND,EAQA;AACA,GAAI,CAACF,cAAL,CAAqB,CACjBO,OAAO,CAACC,GAAR,CAAY,kBAAZ,EACAC,KAAK,CAAC,oDAAD,CAAL,CACH,CAtBqB,sDAAH,kBAAjBjB,CAAAA,iBAAiB,0CAAvB,CAyBA;AACA,GAAMkB,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAAC,KAAK,CAAI,CAC1B,GAAIA,KAAK,CAACC,OAAN,GAAkB,EAAtB,CAA0B,CACtBpB,iBAAiB,GACpB,CACJ,CAJD,CAKA,mBACI,oCACI,YAAK,SAAS,CAAC,SAAf,uBACI,UAAG,SAAS,CAAC,UAAb,sEADJ,EADJ,cAMI,YAAK,SAAS,CAAC,YAAf,uBACI,aAAK,SAAS,CAAC,WAAf,wBAEI,cAAO,IAAI,CAAC,MAAZ,CAAmB,EAAE,CAAC,mBAAtB,CAA0C,SAAS,CAAC,WAApD,CAAgE,WAAW,CAAC,4CAA5E,CAAyH,SAAS,CAAEkB,YAApI,EAFJ,cAII,eAAQ,OAAO,CAAElB,iBAAjB,CAAoC,SAAS,CAAC,cAA9C,qBAJJ,GADJ,EANJ,GADJ,CAiBH,CApDD,CAsDA,cAAeF,CAAAA,IAAf","sourcesContent":["//SEE TESTZIPCODE.JS FOR TRIAL RUN AND THOUGHT PROCESS\r\nimport React, { useEffect, useState } from 'react'\r\n//BOWS API\r\nimport { getResortsData } from '../components/Resort/data/bowsAPI';\r\n\r\n//import Snowboarder from '../images/snowboarder.jpg'\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\n\r\n\r\n//variable used for user input\r\nvar userZipCode;\r\n//pre definded zipcode for testing\r\nconst moutainZip = \"03242\";\r\n// UNQIUE API KEY DONT SHOW\r\nconst apikey = 'nC8qTyVabyAPlnldpR89nTs4OmvWmdyJmGeaHoklFH71ul1StpMre3CNxOhpCOyy';\r\n//API used by getting apikey then having the userzipcode, and then having it compare to the second zipcode which is the mountainzipcode\r\nvar apiDistance = `https://www.zipcodeapi.com/rest/${apikey}/distance.json/${userZipCode}/${moutainZip}/mile`;\r\n\r\n\r\n/*\r\n// this is using the API as a function to use as the textbox by grabbing the id\r\n// thus having it fetch the data and then console logging for now the data \r\nconst searchzipcode = (data) => {\r\n    userZipCode = document.getElementById('searchResortInput').value;\r\n    apiDistance = `https://www.zipcodeapi.com/rest/${apikey}/distance.json/${userZipCode}/${moutainZip}/mile`;\r\n    fetch(apiDistance)\r\n        .then(response => response.json())\r\n        .then(data => console.log(data));\r\n};\r\n*/\r\nconst Home = () => {\r\n    // bowsAPI used for resorts\r\n    const navigate = useNavigate();\r\n\r\n    const ResortListFromApi = async () => {\r\n\r\n        var searchResortInput = document.getElementById('searchResortInput').value;\r\n        const data = await getResortsData();\r\n        // Find resort from backend\r\n        // split used to remove empty spaces. \r\n        // ex if user types patspeak will find pats peak.\r\n        var search_inputresult = searchResortInput.toUpperCase();\r\n        var resortnotfound = false;\r\n\r\n        data.forEach(resort => {\r\n            // this is to make it so users can enter lowercase or uppercase to look at a resort\r\n            if ((resort.name.toUpperCase().split(' ').join('') === search_inputresult.split(' ').join(''))) {\r\n                resortnotfound = true;\r\n                navigate('/resort', { state: { resort } });\r\n            }\r\n        });\r\n\r\n        //if resort is not found, show an alert box to show the user it is not in the database\r\n        if (!resortnotfound) {\r\n            console.log(\"Resort not found\");\r\n            alert(\"Resort Not Found, Will make this a text box soon. \");\r\n        }\r\n\r\n    }\r\n    // function used for error when invalid input text and user clicks enter\r\n    const enterPressed = event => {\r\n        if (event.keyCode === 13) {\r\n            ResortListFromApi();\r\n        }\r\n    };\r\n    return (\r\n        <div>\r\n            <div className=\"aboutme\">\r\n                <p className=\"homepage\">\r\n                    Please enter a resort you want to search for down below!\r\n                </p>\r\n            </div>\r\n            <div className=\"background\">\r\n                <div className=\"searchbar\">\r\n\r\n                    <input type=\"text\" id=\"searchResortInput\" className=\"searchbar\" placeholder=\"Please enter your zipcode or a Resort name\" onKeyDown={enterPressed}></input>\r\n\r\n                    <button onClick={ResortListFromApi} className=\"searchbutton\">SUBMIT </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}